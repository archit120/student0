1. What virtual address did the program try to access from userspace that caused it to crash?
0xc0000008

2. What is the virtual address of the instruction that resulted in the crash?
0x8048757

3. To investigate, disassemble the do-nothing binary using objdump (you used this tool in Homework0). 
What is the name of the function the program was in when it crashed? 
Copy the disassembled code for that function onto Gradescope, and identify the instruction at which the program crashed.

08048754 <_start>:
                        8048754:	83 ec 1c             	sub    $0x1c,%esp
 crash instruction -->  8048757:	8b 44 24 24          	mov    0x24(%esp),%eax
                        804875b:	89 44 24 04          	mov    %eax,0x4(%esp)
                        804875f:	8b 44 24 20          	mov    0x20(%esp),%eax
                        8048763:	89 04 24             	mov    %eax,(%esp)
                        8048766:	e8 35 f9 ff ff       	call   80480a0 <main>
                        804876b:	89 04 24             	mov    %eax,(%esp)
                        804876e:	e8 49 1b 00 00       	call   804a2bc <exit>


4. Find the C code for the function you identified above (hint: it was executed in userspace, so it’s
either in do-nothing.c or one of the files in proj0/src/lib or proj0/src/lib/user), and copy it
onto Gradescope. For each instruction in the disassembled function in #3, explain in a few words
why it’s necessary and/or what it’s trying to do. Hint: see 80x86 Calling Convention.

entry.c 

#include <syscall.h>

int main (int, char *[]);
void _start (int argc, char *argv[]);

void
_start (int argc, char *argv[])
{
  exit (main (argc, argv));
}


8048754: create space in stack for 7 32 bit words
8048757: copy arg 1 of _start function to temporary variable
804875b: copy from temporary variable to stack 
804875f, 8048763: same for arg 0
8048766: call main
804876b: take return and place it to arg 0 position
804876e: call exit

5. Why did the instruction you identified in #3 try to access memory at the virtual address you
identified in #1? Don’t explain this in terms of the values of registers; we’re looking for a higher
level explanation.

it tried reading an object from its stack and moving it to a temporary register. 
The memory location should be in the processes stack so it should be readable





6. Step into the process_execute function. What is the name and address of the thread running
this function? What other threads are present in Pintos at this time? Copy their struct threads.
(Hint: for the last part dumplist &all_list thread allelem may be useful.)


current -> 0xc000e000, name = "main", '\000' <repeats 11 times>, stack = 0xc000edec <incomplete sequence \357>, priority = 31, allelem = {prev = 0xc0035910 <all_list>, next = 0xc0104020}, elem = {prev = 0xc0035920 <ready_list>, next = 0xc0035928 <rea
dy_list+8>}, pagedir = 0x0, magic = 3446325067}

pintos-debug: dumplist #0: 0xc000e000 {tid = 1, status = THREAD_RUNNING, name = "main", '\000' <repeats 11 times>, stack = 0xc000edec <incomplete sequence \357>, priority = 31, allelem = {prev = 0xc0035910 <all_list>, next = 0xc0104020}, elem = {prev = 0xc0035920 <ready_list>, next = 0xc0035928 <rea
dy_list+8>}, pagedir = 0x0, magic = 3446325067}
pintos-debug: dumplist #1: 0xc0104000 {tid = 2, status = THREAD_BLOCKED, name = "idle", '\000' <repeats 11 times>, stack = 0xc0104f34 "", priority = 0, allelem = {prev = 0xc000e020, next = 0xc0035918 <all_list+8>}, elem = {prev = 0xc0035920 <ready_list>, next = 0xc0035928 <ready_list+8>}, pagedir =
0x0, magic = 3446325067}


7. What is the backtrace for the current thread? Copy the backtrace from GDB as your answer and
also copy down the line of C code corresponding to each function call.

#0  process_execute (file_name=file_name@entry=0xc0007d50 "do-nothing") at ../../userprog/process.c:32
#1  0xc0020268 in run_task (argv=0xc00357cc <argv+12>) at ../../threads/init.c:288
#2  0xc0020921 in run_actions (argv=0xc00357cc <argv+12>) at ../../threads/init.c:340
#3  main () at ../../threads/init.c:133

8. Set a breakpoint at start_process and continue to that point. What is the name and address of
the thread running this function? What other threads are present in Pintos at this time? Copy
their struct threads.

Current thread:
0xc010a000 {tid = 3, status = THREAD_RUNNING, name = "do-nothing\000\000\000\000\000", stack = 0xc010afd4 "", priority = 31, allelem = {prev = 0xc0104020, next = 0xc0035918 <all_list+8>}, elem = {prev = 0xc0035920 <ready_list>, next = 0xc0035928 <ready_list+8>}, pagedir =
0x0, magic = 3446325067}

All threads : 
pintos-debug: dumplist #0: 0xc000e000 {tid = 1, status = THREAD_BLOCKED, name = "main", '\000' <repeats 11 times>, stack = 0xc000eeac "\001", priority = 31, allelem = {prev = 0xc0035910 <all_list>, next = 0xc0104020}, elem = {prev = 0xc0037314 <temporary+4>, next = 0xc003731c <temporary+12>}, pagedi
r = 0x0, magic = 3446325067}
pintos-debug: dumplist #1: 0xc0104000 {tid = 2, status = THREAD_BLOCKED, name = "idle", '\000' <repeats 11 times>, stack = 0xc0104f34 "", priority = 0, allelem = {prev = 0xc000e020, next = 0xc010a020}, elem = {prev = 0xc0035920 <ready_list>, next = 0xc0035928 <ready_list+8>}, pagedir = 0x0, magic =
3446325067}
pintos-debug: dumplist #2: 0xc010a000 {tid = 3, status = THREAD_RUNNING, name = "do-nothing\000\000\000\000\000", stack = 0xc010afd4 "", priority = 31, allelem = {prev = 0xc0104020, next = 0xc0035918 <all_list+8>}, elem = {prev = 0xc0035920 <ready_list>, next = 0xc0035928 <ready_list+8>}, pagedir =
0x0, magic = 3446325067}

9. Where is the thread running start_process created? Copy down this line of code.

in thread.c 
  function (aux);       /* Execute the thread function. */


10. Step through the start_process() function until you have stepped over the call to load(). Note
that load() sets the eip and esp fields in the if_ structure. Print out the value of the if_
structure, displaying the values in hex (hint: print/x if_).

$2 = {edi = 0x0, esi = 0x0, ebp = 0x0, esp_dummy = 0x0, ebx = 0x0, edx = 0x0, ecx = 0x0, eax = 0x0, gs = 0x23, fs = 0x23, es = 0x23, ds = 0x23, vec_no = 0x0, error_code = 0x0, frame_pointer = 0x0, eip = 0x8048754, cs = 0x1b, eflags = 0x202, esp = 0xc0000000, ss = 0x23}

11. The first instruction in the asm volatile statement sets the stack pointer to the bottom of the
if_ structure. The second one jumps to intr_exit. The comments in the code explain what’s
happening here. Step into the asm volatile statement, and then step through the instructions.
As you step through the iret instruction, observe that the function “returns” into userspace. Why
does the processor switch modes when executing this function? Feel free to explain this in terms
of the values in memory and/or registers at the time iret is executed, and the functionality of the
iret instruction.

The stack points to _if struct once we enter the .intr_exit . Now the popal pops correct values for all the general purpose registers and then pop gs,fs,es,ds are able to restore other registers correctly. 
The add discards vec_no, error_code, frame_pointer. Finally iret changes mode from kernel mode to usermode and sets eip to the value at the stack pointer. also restores cs, eflags, esp, ss. 
Eflags restoration changes the execution mode

12. Once you’ve executed iret, type info registers to print out the contents of registers. Include
the output of this command on Gradescope. How do these values compare to those when you
printed out if_?

(gdb) info registers
eax            0x0      0
ecx            0x0      0
edx            0x0      0
ebx            0x0      0
esp            0xc0000000       0xc0000000
ebp            0x0      0x0
esi            0x0      0
edi            0x0      0
eip            0x8048754        0x8048754
eflags         0x202    [ IF ]
cs             0x1b     27
ss             0x23     35
ds             0x23     35
es             0x23     35
fs             0x23     35
gs             0x23     35

everything matches instead of esp and eip

13. Notice that if you try to get your current location with backtrace you’ll only get a hex address.
This is because because pintos-gdb ./kernel.o only loads in the symbols from the kernel. Now
that we are in userspace, we have to load in the symbols from the Pintos executable we are running,
namely do-nothing. To do this, use loadusersymbols tests/userprog/do-nothing. Now, using
backtrace, you’ll see that you’re currently in the _start function. Using the disassemble and
stepi commands, step through userspace instruction by instruction until the page fault occurs.
At this point, the processor has immediately entered kernel mode to handle the page fault, so
backtrace will show the current stack in kernel mode, not the user stack at the time of the page
fault. However, you can use btpagefault to find the user stack at the time of the page fault.
Copy down the output of btpagefault.

#0  _start (argc=<unavailable>, argv=<unavailable>) at ../../lib/user/entry.c:9


14. Modify the Pintos kernel so that do-nothing no longer crashes. Your change should be in the
Pintos kernel, not the userspace program (do-nothing.c) or libraries in proj0/src/lib. This
should not involve extensive changes to the Pintos source code. Our staff solution solves this
with a single-line change to process.c. Explain the change you made to Pintos and why it was
necessary. After making this change, the do-nothing test should pass but all others will still fail.

L445 in process.c
        *esp = (void*)((uint32_t)PHYS_BASE-20);

The stack pointer given to the process points to the end but the function assumes that the stack above it contains the two arguments, ebp and the return address and 4 more bytes for to make stack-align 0 pass.
the value needs to be greather than or equal to 12 atleast. 3 more words to simulate the second call to main.

15. . It is possible that your fix also works for the stack-align-0 test, but there are solutions for
do-nothing that do not. Take a look at the stack-align-0 test. It behaves similarly to
do-nothing, but it returns the value of esp % 16. Write down what this program should return (hint: this can be found in stack-align-0.ck) as well as why this is the case. You may wish
to review stack alignment from Section 02
.) Then make sure that your previous fix for do-nothing
also passes stack-align-0.


Same as before.

16. Re-run GDB as before. Execute the loadusersymbols command, set a breakpoint at _start,
and continue, to skip directly to the beginning of userspace execution. Using the disassemble
and stepi commands, execute the do-nothing program instruction by instruction until you reach
the int $0x30 instruction in proj0/src/lib/user/syscall.c. At this point, print the top two
words at the top of the stack by examining memory (hint: x/2xw $esp) and copy the output.

(gdb) x/2xw $esp
0xbfffffa8:     0x00000001      0x000000a2

17. The int $0x30 instruction switches to kernel mode and pushes an interrupt stack frame onto the
kernel stack for this process. Continue stepping through instruction-by-instruction until you reach
syscall_handler. What are the values of args[0] and args[1], and how do they relate to your
answer to the previous question?

args[0] and args[1] are the values of the stack in the previous question. args[0] is is the interrupt code and args[1] is return value for a exit syscall